unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, VclTee.TeeGDIPlus, VCLTee.Series,
  VCLTee.TeEngine, Vcl.ExtCtrls, VCLTee.TeeProcs, VCLTee.Chart, Math;

type
  TForm1 = class(TForm)
    Chart1: TChart;
    Chart2: TChart;
    Chart3: TChart;
    Chart4: TChart;
    Chart5: TChart;
    Chart6: TChart;
    Chart7: TChart;
    Chart8: TChart;
    Chart9: TChart;
    Chart10: TChart;
    Chart11: TChart;
    Chart12: TChart;
    Chart13: TChart;
    Series3: TLineSeries;
    Series4: TLineSeries;
    Series1: TBarSeries;
    Series2: TBarSeries;
    Series5: TLineSeries;
    Series6: TLineSeries;
    Series7: TLineSeries;
    Series8: TLineSeries;
    Series9: TLineSeries;
    Series10: TLineSeries;
    Series11: TLineSeries;
    Series12: TLineSeries;
    Series13: TBarSeries;
    Series14: TBarSeries;
    Series15: TBarSeries;
    Series16: TBarSeries;
    Series17: TBarSeries;
    Series18: TBarSeries;
    Series19: TBarSeries;
    Series20: TBarSeries;
    function Dirac(x: Integer): Integer;
    procedure Koef_filter_hg;
    procedure respon_frekuensi_hg;
    procedure Q1_w;
    procedure QJ_k;
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  h, g: array[-2..1] of Double;
  reG, imG, reH, imH:  Real;
  Hw, Gw: array[0..100000] of Extended; // Maksimum ukuran spektrum
  Q: array[1..8, 0..1024] of Extended; // Array untuk nilai Q1(w)
  qj: array[1..8, -1000..10000] of Extended;
const
fs = 1024;

implementation

{$R *.dfm}

function TForm1.Dirac(x: Integer): Integer;
var
  DiracDelta: Integer;
begin
  if (x=0) then DiracDelta := 1
  else DiracDelta := 0;
  Result := DiracDelta;
end;
procedure TForm1.FormCreate(Sender: TObject);
begin
  Koef_filter_hg;
  respon_frekuensi_hg;
  Q1_w;
  QJ_k;
end;
procedure TForm1.Koef_filter_hg;
var
  n: Integer;
begin
  Series1.Clear;
  Series2.Clear;
  for n:=-2 to 1 do
  begin
    h[n] := 1/8*(dirac(n-1) + 3*dirac(n) + 3*dirac(n+1) + dirac(n+2));
    g[n] := -2*(Dirac(n) - dirac(n+1));
    Series1.AddXY(n,g[n]);
    Series2.AddXY(n,h[n]);
  end;
end;
procedure TForm1.respon_frekuensi_hg;
var
  i, k: Integer;
  reG, imG, reH, imH: Double;
begin
  for i := 0 to fs do
  begin
    reG := 0;
    imG := 0;
    reH := 0;
    imH := 0;
    for k := -2 to 1 do
    begin
      reG := reG + g[k] * Cos(k * 2 * Pi * i / fs);
      imG := imG - g[k] * Sin(k * 2 * Pi * i / fs);
      reH := reH + h[k] * Cos(k * 2 * Pi * i / fs);
      imH := imH - h[k] * Sin(k * 2 * Pi * i / fs);
    end;
  Hw[i] := Sqrt(Sqr(reH) + Sqr(imH));
    Gw[i] := Sqrt(Sqr(reG) + Sqr(imG));
  end;
  Series3.Clear;
  Series4.Clear;
  for i := 0 to Round(fs / 2) do
  begin
    Series3.AddXY(i, Hw[i]); // Menampilkan magnitude H(w)
    Series4.AddXY(i, Gw[i]); // Menampilkan magnitude G(w)
  end;
end;
procedure TForm1.Q1_w;
var
  i: Integer;
begin
  Series5.Clear;
  Series6.Clear;
  Series7.Clear;
  Series8.Clear;
  Series9.Clear;
  Series10.Clear;
  Series11.Clear;
  Series12.Clear;

  for i := 0 to Round(fs / 2) do // Batasi iterasi hingga fs / 128
  begin
    Q[1, i] := Gw[i];
    Q[2, i] := Gw[2 * i] * Hw[i];
    Q[3, i] := Gw[4 * i] * Hw[2 * i] * Hw[i];
    Q[4, i] := Gw[8 * i] * Hw[4 * i] * Hw[2 * i] * Hw[i];
    Q[5, i] := Gw[16 * i] * Hw[8 * i] * Hw[4 * i] * Hw[2 * i] * Hw[i];
    Q[6, i] := Gw[32 * i] * Hw[16 * i] * Hw[8 * i] * Hw[4 * i] * Hw[2 * i] * Hw[i];
    Q[7, i] := Gw[64 * i] * Hw[32 * i] * Hw[16 * i] * Hw[8 * i] * Hw[4 * i] * Hw[2 * i] * Hw[i];
    Q[8, i] := Gw[128 * i] * Hw[64 * i] * Hw[32 * i] * Hw[16 * i] * Hw[8 * i] * Hw[4 * i] * Hw[2 * i] * Hw[i];

    Series5.AddXY(i, Q[1, i]);
    Series6.AddXY(i, Q[2, i]);
    Series7.AddXY(i, Q[3, i]);
    Series8.AddXY(i, Q[4, i]);
    Series9.AddXY(i, Q[5, i]);
    Series10.AddXY(i, Q[6, i]);
    Series11.AddXY(i, Q[7, i]);
    Series12.AddXY(i, Q[8, i]);
  end;
end;

procedure TForm1.QJ_k;
var
  i,j,k: Integer;
begin
  Series13.Clear; Series14.Clear; Series15.Clear; Series16.Clear;  Series17.Clear; Series18.Clear; Series19.Clear; Series20.Clear;
  j:=1;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
  begin
    qj[1,k] := -2*(dirac(k)-dirac(k+1));
    series13.AddXY(k,qj[1,k]);
  end;
  j:=2;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
  begin
    qj[2,k] := -1/4*(dirac(k-1) + 3*dirac(k) + 2*dirac(k+1) - 2*dirac(k+2)
                - 3*dirac(k+3) - dirac(k+4));
    series14.AddXY(k,qj[2,k]);
  end;
  j:=3;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
  begin
    qj[3,k] := -1/32*(dirac(k-3) + 3*dirac(k-2) + 6*dirac(k-1) + 10*dirac(k) + 11*dirac(k+1)
                + 9*dirac(k+2) + 4*dirac(k+3) - 4*dirac(k+4) - 9*dirac(k+5) - 11*dirac(k+6)
                - 10*dirac(k+7) - 6*dirac(k+8) - 3*dirac(k+9) - dirac(k+10));
    series15.AddXY(k,qj[3,k]);
  end;
j:=4;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
  begin
    qj[4,k] := -1/256*(dirac(k-7) + 3*dirac(k-6) + 6*dirac(k-5) + 10*dirac(k-4) + 15*dirac(k-3)
                + 21*dirac(k-2) + 28*dirac(k-1) + 36*dirac(k) + 41*dirac(k+1) + 43*dirac(k+2)
                + 42*dirac(k+3) + 38*dirac(k+4) + 31*dirac(k+5) + 21*dirac(k+6) + 8*dirac(k+7)
                - 8*dirac(k+8) - 21*dirac(k+9) - 31*dirac(k+10) - 38*dirac(k+11) - 42*dirac(k+12)
                - 43*dirac(k+13) - 41*dirac(k+14) - 36*dirac(k+15) - 28*dirac(k+16) - 21*dirac(k+17)
                - 15*dirac(k+18) - 10*dirac(k+19) - 6*dirac(k+20) - 3*dirac(k+21) - dirac(k+22));
    Series16.AddXY(k,qj[4,k]);
  end;
 j:=5;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
  begin
    qj[5,k] := -1/(2048)*(dirac(k-15) + 3*dirac(k-14) + 6*dirac(k-13) + 10*dirac(k-12) + 15*dirac(k-11) + 21*dirac(k-10)
                + 28*dirac(k-9) + 36*dirac(k-8) + 45*dirac(k-7) + 55*dirac(k-6) + 66*dirac(k-5) + 78*dirac(k-4)
                + 91*dirac(k-3) + 105*dirac(k-2) + 120*dirac(k-1) + 136*dirac(k) + 149*dirac(k+1) + 159*dirac(k+2)
                + 166*dirac(k+3) + 170*dirac(k+4) + 171*dirac(k+5) + 169*dirac(k+6) + 164*dirac(k+7) + 156*dirac(k+8)
                + 145*dirac(k+9) + 131*dirac(k+10) + 114*dirac(k+11) + 94*dirac(k+12) + 71*dirac(k+13) + 45*dirac(k+14)
                + 16*dirac(k+15) - 16*dirac(k+16) - 45*dirac(k+17) - 71*dirac(k+18) - 94*dirac(k+19) - 114*dirac(k+20)
                - 131*dirac(k+21) - 145*dirac(k+22) - 156*dirac(k+23) - 164*dirac(k+24) - 169*dirac(k+25)
                - 171*dirac(k+26) - 170*dirac(k+27) - 166*dirac(k+28) - 159*dirac(k+29) - 149*dirac(k+30)
                - 136*dirac(k+31) - 120*dirac(k+32) - 105*dirac(k+33) - 91*dirac(k+34) - 78*dirac(k+35)
                - 66*dirac(k+36) - 55*dirac(k+37) - 45*dirac(k+38) - 36*dirac(k+39) - 28*dirac(k+40)
                - 21*dirac(k+41) - 15*dirac(k+42) - 10*dirac(k+43) - 6*dirac(k+44) - 3*dirac(k+45)
                - dirac(k+46));
    series17.AddXY(k,qj[5,k]);
end;
j := 6;
  for k := -(Round(Power(2, j)) + Round(Power(2, j - 1)) - 2) to -(1 - Round(Power(2, j - 1))) do
begin
  qj[6, k] := -1 / (16384) * (Dirac(k - 31) + 3 * Dirac(k - 30) + 6 * Dirac(k - 29) + 10 * Dirac(k - 28) +
                15 * Dirac(k - 27) + 21 * Dirac(k - 26) + 28 * Dirac(k - 25) + 36 * Dirac(k - 24) +
                45 * Dirac(k - 23) + 55 * Dirac(k - 22) + 66 * Dirac(k - 21) + 78 * Dirac(k - 20) +
                91 * Dirac(k - 19) + 105 * Dirac(k - 18) + 120 * Dirac(k - 17) + 136 * Dirac(k - 16) +
                153 * Dirac(k - 15) + 171 * Dirac(k - 14) + 190 * Dirac(k - 13) + 210 * Dirac(k - 12) +
                231 * Dirac(k - 11) + 253 * Dirac(k - 10) + 276 * Dirac(k - 9) + 300 * Dirac(k - 8) +
                325 * Dirac(k - 7) + 351 * Dirac(k - 6) + 378 * Dirac(k - 5) + 406 * Dirac(k - 4) +
                435 * Dirac(k - 3) + 465 * Dirac(k - 2) + 496 * Dirac(k - 1) + 528 * Dirac(k) +
                557 * Dirac(k + 1) + 583 * Dirac(k + 2) + 606 * Dirac(k + 3) + 626 * Dirac(k + 4) +
                643 * Dirac(k + 5) + 657 * Dirac(k + 6) + 668 * Dirac(k + 7) + 676 * Dirac(k + 8) +
                681 * Dirac(k + 9) + 683 * Dirac(k + 10) + 682 * Dirac(k + 11) + 678 * Dirac(k + 12) +
                671 * Dirac(k + 13) + 661 * Dirac(k + 14) + 648 * Dirac(k + 15) + 632 * Dirac(k + 16) +
                613 * Dirac(k + 17) + 591 * Dirac(k + 18) + 566 * Dirac(k + 19) + 538 * Dirac(k + 20) +
                507 * Dirac(k + 21) + 473 * Dirac(k + 22) + 436 * Dirac(k + 23) + 396 * Dirac(k + 24) +
                353 * Dirac(k + 25) + 307 * Dirac(k + 26) + 258 * Dirac(k + 27) + 206 * Dirac(k + 28) +
                151 * Dirac(k + 29) + 93 * Dirac(k + 30) + 32 * Dirac(k + 31) - 32 * Dirac(k + 32) -
                93 * Dirac(k + 33) - 151 * Dirac(k + 34) - 206 * Dirac(k + 35) - 258 * Dirac(k + 36) -
                307 * Dirac(k + 37) - 353 * Dirac(k + 38) - 396 * Dirac(k + 39) - 436 * Dirac(k + 40) -
                473 * Dirac(k + 41) - 507 * Dirac(k + 42) - 538 * Dirac(k + 43) - 566 * Dirac(k + 44) -
                591 * Dirac(k + 45) - 613 * Dirac(k + 46) - 632 * Dirac(k + 47) - 648 * Dirac(k + 48) -
                661 * Dirac(k + 49) - 671 * Dirac(k + 50) - 678 * Dirac(k + 51) - 682 * Dirac(k + 52) -
                683 * Dirac(k + 53) - 681 * Dirac(k + 54) - 676 * Dirac(k + 55) - 668 * Dirac(k + 56) -
                657 * Dirac(k + 57) - 643 * Dirac(k + 58) - 626 * Dirac(k + 59) - 606 * Dirac(k + 60) -
                583 * Dirac(k + 61) - 557 * Dirac(k + 62) - 528 * Dirac(k + 63) - 496 * Dirac(k + 64) -
                465 * Dirac(k + 65) - 435 * Dirac(k + 66) - 406 * Dirac(k + 67) - 378 * Dirac(k + 68) -
                351 * Dirac(k + 69) - 325 * Dirac(k + 70) - 300 * Dirac(k + 71) - 276 * Dirac(k + 72) -
                253 * Dirac(k + 73) - 231 * Dirac(k + 74) - 210 * Dirac(k + 75) - 190 * Dirac(k + 76) -
                171 * Dirac(k + 77) - 153 * Dirac(k + 78) - 136 * Dirac(k + 79) - 120 * Dirac(k + 80) -
                105 * Dirac(k + 81) - 91 * Dirac(k + 82) - 78 * Dirac(k + 83) - 66 * Dirac(k + 84) -
                55 * Dirac(k + 85) - 45 * Dirac(k + 86) - 36 * Dirac(k + 87) - 28 * Dirac(k + 88) -
                21 * Dirac(k + 89) - 15 * Dirac(k + 90) - 10 * Dirac(k + 91) - 6 * Dirac(k + 92) -
                3 * Dirac(k + 93) - Dirac(k + 94));
  Series18.AddXY(k, qj[6, k]);
end;
j:=7;
for k := -(Round(Power(2, j)) + Round(Power(2, j - 1)) - 2) to -(1 - Round(Power(2, j - 1))) do
begin
  qj[7, k] := -1 / 131072 * (
    Dirac(k-63) + 3*Dirac(k-62) + 6*Dirac(k-61) + 10*Dirac(k-60) + 15*Dirac(k-59) +
    21*Dirac(k-58) + 28*Dirac(k-57) + 36*Dirac(k-56) + 45*Dirac(k-55) +
    55*Dirac(k-54) + 66*Dirac(k-53) + 78*Dirac(k-52) + 91*Dirac(k-51) +
    105*Dirac(k-50) + 120*Dirac(k-49) + 136*Dirac(k-48) + 153*Dirac(k-47) +
    171*Dirac(k-46) + 190*Dirac(k-45) + 210*Dirac(k-44) + 231*Dirac(k-43) +
    253*Dirac(k-42) + 276*Dirac(k-41) + 300*Dirac(k-40) + 325*Dirac(k-39) +
    351*Dirac(k-38) + 378*Dirac(k-37) + 406*Dirac(k-36) + 435*Dirac(k-35) +
    465*Dirac(k-34) + 496*Dirac(k-33) + 528*Dirac(k-32) + 561*Dirac(k-31) +
    595*Dirac(k-30) + 630*Dirac(k-29) + 666*Dirac(k-28) + 703*Dirac(k-27) +
    741*Dirac(k-26) + 780*Dirac(k-25) + 820*Dirac(k-24) + 861*Dirac(k-23) +
    903*Dirac(k-22) + 946*Dirac(k-21) + 990*Dirac(k-20) + 1035*Dirac(k-19) +
    1081*Dirac(k-18) + 1128*Dirac(k-17) + 1176*Dirac(k-16) + 1225*Dirac(k-15) +
    1275*Dirac(k-14) + 1326*Dirac(k-13) + 1378*Dirac(k-12) + 1431*Dirac(k-11) +
    1485*Dirac(k-10) + 1540*Dirac(k-9) + 1596*Dirac(k-8) + 1653*Dirac(k-7) +
    1711*Dirac(k-6) + 1770*Dirac(k-5) + 1830*Dirac(k-4) + 1891*Dirac(k-3) +
    1953*Dirac(k-2) + 2016*Dirac(k-1) + 2080*Dirac(k) + 2141*Dirac(k+1) +
    2199*Dirac(k+2) + 2254*Dirac(k+3) + 2306*Dirac(k+4) + 2355*Dirac(k+5) +
    2401*Dirac(k+6) + 2444*Dirac(k+7) + 2484*Dirac(k+8) + 2521*Dirac(k+9) +
    2555*Dirac(k+10) + 2586*Dirac(k+11) + 2614*Dirac(k+12) + 2639*Dirac(k+13) +
    2661*Dirac(k+14) + 2680*Dirac(k+15) + 2696*Dirac(k+16) + 2709*Dirac(k+17) +
    2719*Dirac(k+18) + 2726*Dirac(k+19) + 2730*Dirac(k+20) + 2731*Dirac(k+21) +
    2729*Dirac(k+22) + 2724*Dirac(k+23) + 2716*Dirac(k+24) + 2705*Dirac(k+25) +
    2691*Dirac(k+26) + 2674*Dirac(k+27) + 2654*Dirac(k+28) + 2631*Dirac(k+29) +
    2605*Dirac(k+30) + 2576*Dirac(k+31) + 2544*Dirac(k+32) + 2509*Dirac(k+33) +
    2471*Dirac(k+34) + 2430*Dirac(k+35) + 2386*Dirac(k+36) + 2339*Dirac(k+37) +
    2289*Dirac(k+38) + 2236*Dirac(k+39) + 2180*Dirac(k+40) + 2121*Dirac(k+41) +
    2059*Dirac(k+42) + 1994*Dirac(k+43) + 1926*Dirac(k+44) + 1855*Dirac(k+45) +
    1781*Dirac(k+46) + 1704*Dirac(k+47) + 1624*Dirac(k+48) + 1541*Dirac(k+49) +
    1455*Dirac(k+50) + 1366*Dirac(k+51) + 1274*Dirac(k+52) + 1179*Dirac(k+53) +
    1081*Dirac(k+54) + 980*Dirac(k+55) + 876*Dirac(k+56) + 769*Dirac(k+57) +
    659*Dirac(k+58) + 546*Dirac(k+59) + 430*Dirac(k+60) + 311*Dirac(k+61) +
    189*Dirac(k+62) + 64*Dirac(k+63) - 64*Dirac(k+64) - 189*Dirac(k+65) -
    311*Dirac(k+66) - 430*Dirac(k+67) - 546*Dirac(k+68) - 659*Dirac(k+69) -
    769*Dirac(k+70) - 876*Dirac(k+71) - 980*Dirac(k+72) - 1081*Dirac(k+73) -
    1179*Dirac(k+74) - 1274*Dirac(k+75) - 1366*Dirac(k+76) - 1455*Dirac(k+77) -
    1541*Dirac(k+78) - 1624*Dirac(k+79) - 1704*Dirac(k+80) - 1781*Dirac(k+81) -
    1855*Dirac(k+82) - 1926*Dirac(k+83) - 1994*Dirac(k+84) - 2059*Dirac(k+85) -
    2121*Dirac(k+86) - 2180*Dirac(k+87) - 2236*Dirac(k+88) - 2289*Dirac(k+89) -
    2339*Dirac(k+90) - 2386*Dirac(k+91) - 2430*Dirac(k+92) - 2471*Dirac(k+93) -
    2509*Dirac(k+94) - 2544*Dirac(k+95) - 2576*Dirac(k+96) - 2605*Dirac(k+97) -
    2631*Dirac(k+98) - 2654*Dirac(k+99) - 2674*Dirac(k+100) - 2691*Dirac(k+101) -
    2705*Dirac(k+102) - 2716*Dirac(k+103) - 2724*Dirac(k+104) - 2729*Dirac(k+105) -
    2731*Dirac(k+106) - 2730*Dirac(k+107) - 2726*Dirac(k+108) - 2719*Dirac(k+109) -
    2709*Dirac(k+110) - 2696*Dirac(k+111) - 2680*Dirac(k+112) - 2661*Dirac(k+113) -
    2639*Dirac(k+114) - 2614*Dirac(k+115) - 2586*Dirac(k+116) - 2555*Dirac(k+117) -
    2521*Dirac(k+118) - 2484*Dirac(k+119) - 2444*Dirac(k+120) - 2401*Dirac(k+121) -
    2355*Dirac(k+122) - 2306*Dirac(k+123) - 2254*Dirac(k+124) - 2199*Dirac(k+125) -
    2141*Dirac(k+126) - 2080*Dirac(k+127) - 2016*Dirac(k+128) - 1953*Dirac(k+129) -
    1891*Dirac(k+130) - 1830*Dirac(k+131) - 1770*Dirac(k+132) - 1711*Dirac(k+133) -
    1653*Dirac(k+134) - 1596*Dirac(k+135) - 1540*Dirac(k+136) - 1485*Dirac(k+137) -
    1431*Dirac(k+138) - 1378*Dirac(k+139) - 1326*Dirac(k+140) - 1275*Dirac(k+141) -
    1225*Dirac(k+142) - 1176*Dirac(k+143) - 1128*Dirac(k+144) - 1081*Dirac(k+145) -
    1035*Dirac(k+146) - 990*Dirac(k+147) - 946*Dirac(k+148) - 903*Dirac(k+149) -
    861*Dirac(k+150) - 820*Dirac(k+151) - 780*Dirac(k+152) - 741*Dirac(k+153) -
    703*Dirac(k+154) - 666*Dirac(k+155) - 630*Dirac(k+156) - 595*Dirac(k+157) -
    561*Dirac(k+158) - 528*Dirac(k+159) - 496*Dirac(k+160) - 465*Dirac(k+161) -
    435*Dirac(k+162) - 406*Dirac(k+163) - 378*Dirac(k+164) - 351*Dirac(k+165) -
    325*Dirac(k+166) - 300*Dirac(k+167) - 276*Dirac(k+168) - 253*Dirac(k+169) -
    231*Dirac(k+170) - 210*Dirac(k+171) - 190*Dirac(k+172) - 171*Dirac(k+173) -
    153*Dirac(k+174) - 136*Dirac(k+175) - 120*Dirac(k+176) - 105*Dirac(k+177) -
    91*Dirac(k+178) - 78*Dirac(k+179) - 66*Dirac(k+180) - 55*Dirac(k+181) -
    45*Dirac(k+182) - 36*Dirac(k+183) - 28*Dirac(k+184) - 21*Dirac(k+185) -
    15*Dirac(k+186) - 10*Dirac(k+187) - 6*Dirac(k+188) - 3*Dirac(k+189) -
    Dirac(k+190));
  Series19.AddXY(k, qj[7, k]);
end;
j:=8;
for k := -(Round(Power(2, j)) + Round(Power(2, j - 1)) - 2) to -(1 - Round(Power(2, j - 1))) do
begin
  qj[8, k] := -1 / 1048576 * (
    Dirac(k-127) + 3*Dirac(k-126) + 6*Dirac(k-125) + 10*Dirac(k-124) + 15*Dirac(k-123) +
    21*Dirac(k-122) + 28*Dirac(k-121) + 36*Dirac(k-120) + 45*Dirac(k-119) + 55*Dirac(k-118) +
    66*Dirac(k-117) + 78*Dirac(k-116) + 91*Dirac(k-115) + 105*Dirac(k-114) + 120*Dirac(k-113) +
    136*Dirac(k-112) + 153*Dirac(k-111) + 171*Dirac(k-110) + 190*Dirac(k-109) + 210*Dirac(k-108) +
    231*Dirac(k-107) + 253*Dirac(k-106) + 276*Dirac(k-105) + 300*Dirac(k-104) + 325*Dirac(k-103) +
    351*Dirac(k-102) + 378*Dirac(k-101) + 406*Dirac(k-100) + 435*Dirac(k-99) + 465*Dirac(k-98) +
    496*Dirac(k-97) + 528*Dirac(k-96) + 561*Dirac(k-95) + 595*Dirac(k-94) + 630*Dirac(k-93) +
    666*Dirac(k-92) + 703*Dirac(k-91) + 741*Dirac(k-90) + 780*Dirac(k-89) + 820*Dirac(k-88) +
    861*Dirac(k-87) + 903*Dirac(k-86) + 946*Dirac(k-85) + 990*Dirac(k-84) + 1035*Dirac(k-83) +
    1081*Dirac(k-82) + 1128*Dirac(k-81) + 1176*Dirac(k-80) + 1225*Dirac(k-79) + 1275*Dirac(k-78) +
    1326*Dirac(k-77) + 1378*Dirac(k-76) + 1431*Dirac(k-75) + 1485*Dirac(k-74) + 1540*Dirac(k-73) +
    1596*Dirac(k-72) + 1653*Dirac(k-71) + 1711*Dirac(k-70) + 1770*Dirac(k-69) + 1830*Dirac(k-68) +
    1891*Dirac(k-67) + 1953*Dirac(k-66) + 2016*Dirac(k-65) + 2080*Dirac(k-64) + 2145*Dirac(k-63) +
    2211*Dirac(k-62) + 2278*Dirac(k-61) + 2346*Dirac(k-60) + 2415*Dirac(k-59) + 2485*Dirac(k-58) +
    2556*Dirac(k-57) + 2628*Dirac(k-56) + 2701*Dirac(k-55) + 2775*Dirac(k-54) + 2850*Dirac(k-53) +
    2926*Dirac(k-52) + 3003*Dirac(k-51) + 3081*Dirac(k-50) + 3160*Dirac(k-49) + 3240*Dirac(k-48) +
    3321*Dirac(k-47) + 3403*Dirac(k-46) + 3486*Dirac(k-45) + 3570*Dirac(k-44) + 3655*Dirac(k-43) +
    3741*Dirac(k-42) + 3828*Dirac(k-41) + 3916*Dirac(k-40) + 4005*Dirac(k-39) + 4095*Dirac(k-38) +
    4186*Dirac(k-37) + 4278*Dirac(k-36) + 4371*Dirac(k-35) + 4465*Dirac(k-34) + 4560*Dirac(k-33) +
    4656*Dirac(k-32) + 4753*Dirac(k-31) + 4851*Dirac(k-30) + 4950*Dirac(k-29) + 5050*Dirac(k-28) +
    5151*Dirac(k-27) + 5253*Dirac(k-26) + 5356*Dirac(k-25) + 5460*Dirac(k-24) + 5565*Dirac(k-23) +
    5671*Dirac(k-22) + 5778*Dirac(k-21) + 5886*Dirac(k-20) + 5995*Dirac(k-19) + 6105*Dirac(k-18) +
    6216*Dirac(k-17) + 6328*Dirac(k-16) + 6441*Dirac(k-15) + 6555*Dirac(k-14) + 6670*Dirac(k-13) +
    6786*Dirac(k-12) + 6903*Dirac(k-11) + 7021*Dirac(k-10) + 7140*Dirac(k-9) + 7260*Dirac(k-8) +
    7381*Dirac(k-7) + 7503*Dirac(k-6) + 7626*Dirac(k-5) + 7750*Dirac(k-4) + 7875*Dirac(k-3) +
    8001*Dirac(k-2) + 8128*Dirac(k-1) + 8256*Dirac(k) + 8381*Dirac(k+1) + 8503*Dirac(k+2) +
    8622*Dirac(k+3) + 8738*Dirac(k+4) + 8851*Dirac(k+5) + 8961*Dirac(k+6) + 9068*Dirac(k+7) +
    9172*Dirac(k+8) + 9273*Dirac(k+9) + 9371*Dirac(k+10) + 9466*Dirac(k+11) + 9558*Dirac(k+12) +
    9647*Dirac(k+13) + 9733*Dirac(k+14) + 9816*Dirac(k+15) + 9896*Dirac(k+16) + 9973*Dirac(k+17) +
    10047*Dirac(k+18) + 10118*Dirac(k+19) + 10186*Dirac(k+20) + 10251*Dirac(k+21) + 10313*Dirac(k+22) +
    10372*Dirac(k+23) + 10428*Dirac(k+24) + 10481*Dirac(k+25) + 10531*Dirac(k+26) + 10578*Dirac(k+27) +
    10622*Dirac(k+28) + 10663*Dirac(k+29) + 10701*Dirac(k+30) + 10736*Dirac(k+31) + 10768*Dirac(k+32) +
    10797*Dirac(k+33) + 10823*Dirac(k+34) + 10846*Dirac(k+35) + 10866*Dirac(k+36) + 10883*Dirac(k+37) +
    10897*Dirac(k+38) + 10908*Dirac(k+39) + 10916*Dirac(k+40) + 10921*Dirac(k+41) + 10923*Dirac(k+42) +
    10922*Dirac(k+43) + 10918*Dirac(k+44) + 10911*Dirac(k+45) + 10901*Dirac(k+46) + 10888*Dirac(k+47) +
    10872*Dirac(k+48) + 10853*Dirac(k+49) + 10831*Dirac(k+50) + 10806*Dirac(k+51) + 10778*Dirac(k+52) +
    10747*Dirac(k+53) + 10713*Dirac(k+54) + 10676*Dirac(k+55) + 10636*Dirac(k+56) + 10593*Dirac(k+57) +
    10547*Dirac(k+58) + 10498*Dirac(k+59) + 10446*Dirac(k+60) + 10391*Dirac(k+61) + 10333*Dirac(k+62) +
    10272*Dirac(k+63) + 10208*Dirac(k+64) + 10141*Dirac(k+65) + 10071*Dirac(k+66) + 9998*Dirac(k+67) +
    9922*Dirac(k+68) + 9843*Dirac(k+69) + 9761*Dirac(k+70) + 9676*Dirac(k+71) + 9588*Dirac(k+72) +
    9497*Dirac(k+73) + 9403*Dirac(k+74) + 9306*Dirac(k+75) + 9206*Dirac(k+76) + 9103*Dirac(k+77) +
    8997*Dirac(k+78) + 8888*Dirac(k+79) + 8776*Dirac(k+80) + 8661*Dirac(k+81) + 8543*Dirac(k+82) +
    8422*Dirac(k+83) + 8298*Dirac(k+84) + 8171*Dirac(k+85) + 8041*Dirac(k+86) + 7908*Dirac(k+87) +
    7772*Dirac(k+88) + 7633*Dirac(k+89) + 7491*Dirac(k+90) + 7346*Dirac(k+91) + 7198*Dirac(k+92) +
    7047*Dirac(k+93) + 6893*Dirac(k+94) + 6736*Dirac(k+95) + 6576*Dirac(k+96) + 6413*Dirac(k+97) +
    6247*Dirac(k+98) + 6078*Dirac(k+99) + 5906*Dirac(k+100) + 5731*Dirac(k+101) + 5553*Dirac(k+102) +
    5372*Dirac(k+103) + 5188*Dirac(k+104) + 5001*Dirac(k+105) + 4811*Dirac(k+106) + 4618*Dirac(k+107) +
    4422*Dirac(k+108) + 4223*Dirac(k+109) + 4021*Dirac(k+110) + 3816*Dirac(k+111) + 3608*Dirac(k+112) +
    3397*Dirac(k+113) + 3183*Dirac(k+114) + 2966*Dirac(k+115) + 2746*Dirac(k+116) + 2523*Dirac(k+117) +
    2297*Dirac(k+118) + 2068*Dirac(k+119) + 1836*Dirac(k+120) + 1601*Dirac(k+121) + 1363*Dirac(k+122) +
    1122*Dirac(k+123) + 878*Dirac(k+124) + 631*Dirac(k+125) + 381*Dirac(k+126) + 128*Dirac(k+127) -
    128*Dirac(k+128) - 381*Dirac(k+129) - 631*Dirac(k+130) - 878*Dirac(k+131) - 1122*Dirac(k+132) -
    1363*Dirac(k+133) - 1601*Dirac(k+134) - 1836*Dirac(k+135) - 2068*Dirac(k+136) - 2297*Dirac(k+137) -
    2523*Dirac(k+138) - 2746*Dirac(k+139) - 2966*Dirac(k+140) - 3183*Dirac(k+141) - 3397*Dirac(k+142) -
    3608*Dirac(k+143) - 3816*Dirac(k+144) - 4021*Dirac(k+145) - 4223*Dirac(k+146) - 4422*Dirac(k+147) -
    4618*Dirac(k+148) - 4811*Dirac(k+149) - 5001*Dirac(k+150) - 5188*Dirac(k+151) - 5372*Dirac(k+152) -
    5553*Dirac(k+153) - 5731*Dirac(k+154) - 5906*Dirac(k+155) - 6078*Dirac(k+156) - 6247*Dirac(k+157) -
    6413*Dirac(k+158) - 6576*Dirac(k+159) - 6736*Dirac(k+160) - 6893*Dirac(k+161) - 7047*Dirac(k+162) -
    7198*Dirac(k+163) - 7346*Dirac(k+164) - 7491*Dirac(k+165) - 7633*Dirac(k+166) - 7772*Dirac(k+167) -
    7908*Dirac(k+168) - 8041*Dirac(k+169) - 8171*Dirac(k+170) - 8298*Dirac(k+171) - 8422*Dirac(k+172) -
    8543*Dirac(k+173) - 8661*Dirac(k+174) - 8776*Dirac(k+175) - 8888*Dirac(k+176) - 8997*Dirac(k+177) - 9103*Dirac(k+178) - 9206*Dirac(k+179) -
9306*Dirac(k+180) - 9403*Dirac(k+181) - 9497*Dirac(k+182) - 9588*Dirac(k+183) - 9676*Dirac(k+184) -
9761*Dirac(k+185) - 9843*Dirac(k+186) - 9922*Dirac(k+187) - 9998*Dirac(k+188) - 10071*Dirac(k+189) -
10141*Dirac(k+190) - 10208*Dirac(k+191) - 10272*Dirac(k+192) - 10333*Dirac(k+193) - 10391*Dirac(k+194) -
10446*Dirac(k+195) - 10498*Dirac(k+196) - 10547*Dirac(k+197) - 10593*Dirac(k+198) - 10636*Dirac(k+199) -
10676*Dirac(k+200) - 10713*Dirac(k+201) - 10747*Dirac(k+202) - 10778*Dirac(k+203) - 10806*Dirac(k+204) -
10831*Dirac(k+205) - 10853*Dirac(k+206) - 10872*Dirac(k+207) - 10888*Dirac(k+208) - 10901*Dirac(k+209) -
10911*Dirac(k+210) - 10918*Dirac(k+211) - 10922*Dirac(k+212) - 10923*Dirac(k+213) - 10921*Dirac(k+214) -
10916*Dirac(k+215) - 10908*Dirac(k+216) - 10897*Dirac(k+217) - 10883*Dirac(k+218) - 10866*Dirac(k+219) -
10846*Dirac(k+220) - 10823*Dirac(k+221) - 10797*Dirac(k+222) - 10768*Dirac(k+223) - 10736*Dirac(k+224) -
10701*Dirac(k+225) - 10663*Dirac(k+226) - 10622*Dirac(k+227) - 10578*Dirac(k+228) - 10531*Dirac(k+229) -
10481*Dirac(k+230) - 10428*Dirac(k+231) - 10372*Dirac(k+232) - 10313*Dirac(k+233) - 10251*Dirac(k+234) -
10186*Dirac(k+235) - 10118*Dirac(k+236) - 10047*Dirac(k+237) - 9973*Dirac(k+238) - 9896*Dirac(k+239) -
9816*Dirac(k+240) - 9733*Dirac(k+241) - 9647*Dirac(k+242) - 9558*Dirac(k+243) - 9466*Dirac(k+244) -
9371*Dirac(k+245) - 9273*Dirac(k+246) - 9172*Dirac(k+247) - 9068*Dirac(k+248) - 8961*Dirac(k+249) -
8851*Dirac(k+250) - 8738*Dirac(k+251) - 8622*Dirac(k+252) - 8503*Dirac(k+253) - 8381*Dirac(k+254) -
8256*Dirac(k+255) - 8128*Dirac(k+256) - 8001*Dirac(k+257) - 7875*Dirac(k+258) - 7750*Dirac(k+259) -
7626*Dirac(k+260) - 7503*Dirac(k+261) - 7381*Dirac(k+262) - 7260*Dirac(k+263) - 7140*Dirac(k+264) -
7021*Dirac(k+265) - 6903*Dirac(k+266) - 6786*Dirac(k+267) - 6670*Dirac(k+268) - 6555*Dirac(k+269) -
6441*Dirac(k+270) - 6328*Dirac(k+271) - 6216*Dirac(k+272) - 6105*Dirac(k+273) - 5995*Dirac(k+274) -
5886*Dirac(k+275) - 5778*Dirac(k+276) - 5671*Dirac(k+277) - 5565*Dirac(k+278) - 5460*Dirac(k+279) -
5356*Dirac(k+280) - 5253*Dirac(k+281) - 5151*Dirac(k+282) - 5050*Dirac(k+283) - 4950*Dirac(k+284) -
4851*Dirac(k+285) - 4753*Dirac(k+286) - 4656*Dirac(k+287) - 4560*Dirac(k+288) - 4465*Dirac(k+289) -
4371*Dirac(k+290) - 4278*Dirac(k+291) - 4186*Dirac(k+292) - 4095*Dirac(k+293) - 4005*Dirac(k+294) -
3916*Dirac(k+295) - 3828*Dirac(k+296) - 3741*Dirac(k+297) - 3655*Dirac(k+298) - 3570*Dirac(k+299) -
3486*Dirac(k+300) - 3403*Dirac(k+301) - 3321*Dirac(k+302) - 3240*Dirac(k+303) - 3160*Dirac(k+304) -
3081*Dirac(k+305) - 3003*Dirac(k+306) - 2926*Dirac(k+307) - 2850*Dirac(k+308) - 2775*Dirac(k+309) -
2701*Dirac(k+310) - 2628*Dirac(k+311) - 2556*Dirac(k+312) - 2485*Dirac(k+313) - 2415*Dirac(k+314) -
2346*Dirac(k+315) - 2278*Dirac(k+316) - 2211*Dirac(k+317) - 2145*Dirac(k+318) - 2080*Dirac(k+319) -
2016*Dirac(k+320) - 1953*Dirac(k+321) - 1891*Dirac(k+322) - 1830*Dirac(k+323) - 1770*Dirac(k+324) -
1711*Dirac(k+325) - 1653*Dirac(k+326) - 1596*Dirac(k+327) - 1540*Dirac(k+328) - 1485*Dirac(k+329) -
1431*Dirac(k+330) - 1378*Dirac(k+331) - 1326*Dirac(k+332) - 1275*Dirac(k+333) - 1225*Dirac(k+334) -
1176*Dirac(k+335) - 1128*Dirac(k+336) - 1081*Dirac(k+337) - 1035*Dirac(k+338) - 990*Dirac(k+339) -
946*Dirac(k+340) - 903*Dirac(k+341) - 861*Dirac(k+342) - 820*Dirac(k+343) - 780*Dirac(k+344) -
741*Dirac(k+345) - 703*Dirac(k+346) - 666*Dirac(k+347) - 630*Dirac(k+348) - 595*Dirac(k+349) -
561*Dirac(k+350) - 528*Dirac(k+351) - 496*Dirac(k+352) - 465*Dirac(k+353) - 435*Dirac(k+354) -
406*Dirac(k+355) - 378*Dirac(k+356) - 351*Dirac(k+357) - 325*Dirac(k+358) - 300*Dirac(k+359) -
276*Dirac(k+360) - 253*Dirac(k+361) - 231*Dirac(k+362) - 210*Dirac(k+363) - 190*Dirac(k+364) -
171*Dirac(k+365) - 153*Dirac(k+366) - 136*Dirac(k+367) - 120*Dirac(k+368) - 105*Dirac(k+369) -
91*Dirac(k+370) - 78*Dirac(k+371) - 66*Dirac(k+372) - 55*Dirac(k+373) - 45*Dirac(k+374) -
36*Dirac(k+375) - 28*Dirac(k+376) - 21*Dirac(k+377) - 15*Dirac(k+378) - 10*Dirac(k+379) -
6*Dirac(k+380) - 3*Dirac(k+381) - Dirac(k+382));
  Series20.AddXY(k, qj[8, k]);
end;
end;

end.
